import frequency_domain
import argparse

'''
This is a cript which defines the CLI interface for the Frequency Domain Steganography class

There are two modes which can be used:
    Transmitter - This takes in two audio files as input. 
                    1. The base file is the source sound where the audio will be hidden
                    2. The secret message file is the message we want to obfuscate 
                        (i.e. the file to be hidden inside base file)

                It outputs a new audio file containing the combined base + secret message

    Receiver - This takes in a single audio file as input, this is expected to be
                an audio file which has previously been generated by the Transmitter
                containing both the base audio data and the hidden message.

                It outputs a new audio file containing the recovered secret message
'''

def transmitter(args):
    transmitter = frequency_domain.Transmitter(args.base_audio, args.secret_audio, lpf_cutoff=14000.0, order=96)
    transmitter.perform()
    transmitter.write(args.output_path)


def receiver(args):
    transmitter = frequency_domain.Receiver(args.input_audio, order=48, bpf_lowcutoff=18500.0, bpf_highcutoff=21500.0)
    transmitter.perform(modulation_index=1, carrier_frequency = 20000.0)
    transmitter.write(args.output_path)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(help='Sub command help')
    subparsers.required = True

    transmitter_parser = subparsers.add_parser("transmitter", help='transmitter help')
    transmitter_parser.add_argument("base_audio", help="The path to the base audio file")
    transmitter_parser.add_argument("secret_audio", help="The path to the secret audio file")
    transmitter_parser.add_argument("output_path", help="The path where the output audio will be saved")
    transmitter_parser.set_defaults(func=transmitter)

    receiver_parser = subparsers.add_parser("receiver", help="receiver help")
    receiver_parser.add_argument("input_audio", help="The path to the audio with the hidden message inside")
    receiver_parser.add_argument("output_path", help="The path where the recovered message will be saved")
    receiver_parser.set_defaults(func=receiver)

    args = parser.parse_args()
    args.func(args)
    